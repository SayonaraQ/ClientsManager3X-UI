from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from datetime import datetime, timedelta
import os

from bot.api import find_user_by_tg, add_trial_user, get_inbounds, prolong_user
from bot.utils import generate_uuid, generate_sub_id, generate_email, generate_expiry, get_expiry_datetime, is_admin

router = Router()

ADMIN_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")  # –ö—É–¥–∞ —É–≤–µ–¥–æ–º–ª—è—Ç—å –∞–¥–º–∏–Ω–∞
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")
SUB_LINK_TEMPLATE = os.getenv("SUB_LINK_TEMPLATE")

YOOMONEY_LINKS = {
    "1": os.getenv("YOOMONEY_LINK_1"),
    "3": os.getenv("YOOMONEY_LINK_3"),
    "6": os.getenv("YOOMONEY_LINK_6")
}

# /start –∫–æ–º–∞–Ω–¥–∞
@router.message(Command("start"))
async def start_handler(message: Message):
    tg_id = message.from_user.id
    user = await find_user_by_tg(tg_id)

    if user:
        expiry_ms = user.get("expiryTime")
        expiry_str = "‚àû"
        if expiry_ms:
            dt = get_expiry_datetime(expiry_ms)
            if dt:
                expiry_str = dt.strftime("%d.%m.%Y %H:%M")
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.\n"
            f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{expiry_str}</b>\n"
            "–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∑–∞ —Å—É—Ç–∫–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."
        )
    else:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="get_trial")]
            ]
        )
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞—à VPN.\n"
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 3 –¥–Ω—è?",
            reply_markup=kb
        )

# –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∏–∞–ª–∞
@router.callback_query(F.data == "get_trial")
async def handle_get_trial(callback: CallbackQuery):
    tg_id = callback.from_user.id
    inbounds = await get_inbounds()
    if not inbounds:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VPN. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    inbound = inbounds[0]
    client = {
        "id": generate_uuid(),
        "email": generate_email(tg_id),
        "enable": True,
        "expiryTime": generate_expiry(),
        "flow": "xtls-rprx-vision",
        "limitIp": 2,
        "reset": 0,
        "tgId": tg_id,
        "subId": generate_sub_id()
    }

    success, sub_id, expiry_ms = await add_trial_user(inbound["id"], tg_id)
    if not success:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–±–Ω—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å.")
        return

    expiry = get_expiry_datetime(expiry_ms).strftime("%d.%m.%Y %H:%M")
    sub_link = SUB_LINK_TEMPLATE.format(subId=sub_id)

    await callback.message.answer(
        f"üéâ –í–∞—à–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
        f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{expiry}</b>\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –°–ö–û–ü–ò–†–£–ô–¢–ï –ï–Å:\n<code>{sub_link}</code>\n\n"
        f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë –≤ –≤–∞—à–µ–º VPN-–∫–ª–∏–µ–Ω—Ç–µ.\n"
        f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é: https://telegra.ph/Instrukciya-po-nastrojke-nashego-VPN-09-11-2\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ - 200—Ä/–º–µ—Å—è—Ü\n\n"
        f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ <a href='https://t.me/{ADMIN_USERNAME}'>–∞–¥–º–∏–Ω—É</a>.",
        disable_web_page_preview=True
    )

# –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" (–ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø)
async def send_payment_options(tg_id: int, bot):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="1 –º–µ—Å—è—Ü (200‚ÇΩ)", callback_data="pay_1"),
                InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ (600‚ÇΩ)", callback_data="pay_3"),
                InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ (1200‚ÇΩ)", callback_data="pay_6"),
            ]
        ]
    )
    await bot.send_message(
        chat_id=tg_id,
        text="üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=kb
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã
@router.callback_query(F.data.startswith("pay_"))
async def handle_payment_choice(callback: CallbackQuery):
    choice = callback.data.split("_")[1]

    link = YOOMONEY_LINKS.get(choice)
    if not link:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞, –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø–ª–∞—Ç—ã.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –∫–Ω–æ–ø–∫—É "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É"
    await callback.message.answer(
        text=f"üí∏ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{link}\n\n"
             "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É</b>.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="payment_done")]
            ]
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É"
@router.callback_query(F.data == "payment_done")
async def handle_payment_done(callback: CallbackQuery):
    tg_id = callback.from_user.id
    username = callback.from_user.username or "–ë–µ–∑ username"

    await callback.message.edit_reply_markup()  # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü", callback_data=f"extend_1_{tg_id}"),
                InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 3 –º–µ—Å—è—Ü–∞", callback_data=f"extend_3_{tg_id}"),
                InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤", callback_data=f"extend_6_{tg_id}"),
            ]
        ]
    )

    await callback.message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    await callback.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É.\n"
            f"Telegram ID: <code>{tg_id}</code>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:"
        ),
        reply_markup=kb
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
@router.callback_query(F.data.startswith("extend_"))
async def handle_extend(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    parts = callback.data.split("_")
    months = int(parts[1])
    tg_id = int(parts[2])

    user = await find_user_by_tg(tg_id)
    if not user:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    expiry_now = get_expiry_datetime(user["expiryTime"])
    if not expiry_now:
        expiry_now = datetime.now()

    # –ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    new_expiry = expiry_now + timedelta(days=30 * months)
    new_expiry = new_expiry.replace(hour=23, minute=59, second=59, microsecond=0)

    success = await prolong_user(user["client"]["id"], int(new_expiry.timestamp() * 1000))

    await callback.message.edit_reply_markup()  # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏

    if success:
        await callback.message.answer(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{tg_id}</code> –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {new_expiry.strftime('%d.%m.%Y %H:%M:%S')}"
        )
    else:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{tg_id}</code>.")
