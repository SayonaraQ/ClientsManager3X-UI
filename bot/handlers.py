from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, PreCheckoutQuery, ShippingOption, ContentType
from aiogram.enums import ContentType
from aiogram.filters import Command, CommandObject
from datetime import datetime, timedelta, timezone
from zoneinfo import ZoneInfo
from bot.sync import sync_to_google_sheets
import os
from bot.api import find_user_by_tg, add_trial_user, get_inbounds, update_user_expiry, get_all_clients
from bot.utils import generate_uuid, generate_sub_id, generate_email, generate_expiry, get_expiry_datetime, is_admin

router = Router()

ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_ID", "").split(",") if x.strip()]
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")
SUB_LINK_TEMPLATE = os.getenv("SUB_LINK_TEMPLATE")

# /start –∫–æ–º–∞–Ω–¥–∞
@router.message(Command("start"))
async def start_handler(message: Message):
    tg_id = message.from_user.id
    user = await find_user_by_tg(tg_id)

    now = datetime.now(ZoneInfo("Europe/Moscow"))
    reply_buttons = [
        [InlineKeyboardButton(text="üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_status")],
        [InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url=f"https://t.me/{ADMIN_USERNAME}")]
    ]

    if user:
        expiry_ms = user.get("expiryTime")
        expiry_str = "‚àû"
        expired = False

        if expiry_ms:
            dt = get_expiry_datetime(expiry_ms)
            if dt:
                expiry_str = dt.strftime("%d.%m.%Y %H:%M")
                expired = dt < now

        sub_id = user.get("subId")
        sub_link = SUB_LINK_TEMPLATE.format(subId=sub_id) if sub_id else "–ù–µ –Ω–∞–π–¥–µ–Ω–∞"

        if expired:
            reply_buttons.insert(0, [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="renew_subscription")])
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                f"‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ <b>{expiry_str}</b>\n\n"
                f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:\n<code>{sub_link}</code>\n\n"
                "üí≥ –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=reply_buttons)
            )
        else:
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                f"üìÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: <b>{expiry_str}</b>\n"
                f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n<code>{sub_link}</code>\n\n"
                "‚è∞ –Ø –Ω–∞–ø–æ–º–Ω—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=reply_buttons)
            )

    else:
        trial_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="get_trial")],
                [InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url=f"https://t.me/{ADMIN_USERNAME}")]
            ]
        )
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–∏—Å.\n"
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 3 –¥–Ω—è?",
            reply_markup=trial_kb
        )


# –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∏–∞–ª–∞
@router.callback_query(F.data == "get_trial")
async def handle_get_trial(callback: CallbackQuery):
    tg_id = callback.from_user.id
    inbounds = await get_inbounds()
    if not inbounds:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    inbound = inbounds[0]

    success, sub_id, expiry_ms = await add_trial_user(inbound["id"], tg_id)
    if not success:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–±–Ω—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å.", show_alert=True)
        return

    expiry = get_expiry_datetime(expiry_ms).strftime("%d.%m.%Y %H:%M")
    sub_link = SUB_LINK_TEMPLATE.format(subId=sub_id)

    await callback.answer()

    await callback.message.answer(
        f"üéâ –í–∞—à–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
        f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{expiry}</b>\n\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –°–ö–û–ü–ò–†–£–ô–¢–ï –ï–Å:\n<code>{sub_link}</code>\n\n"
        f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë –≤ –≤–∞—à–µ–º VPN-–∫–ª–∏–µ–Ω—Ç–µ.\n"
        f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é: https://telegra.ph/Instrukciya-po-nastrojke-nashego-VPN-09-11-2\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ ‚Äî 200—Ä/–º–µ—Å—è—Ü\n\n"
        f"–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ <a href='https://t.me/{ADMIN_USERNAME}'>–∞–¥–º–∏–Ω—É</a>.",
        disable_web_page_preview=True,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_status")],
                [InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url=f"https://t.me/{ADMIN_USERNAME}")]
            ]
        )
    )

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(F.data == "check_status")
async def handle_check_status(callback: CallbackQuery):
    tg_id = callback.from_user.id
    user = await find_user_by_tg(tg_id)

    await callback.answer()

    if user:
        expiry_ms = user.get("expiryTime")
        expiry_str = "‚àû"
        expired = False

        if expiry_ms:
            dt = get_expiry_datetime(expiry_ms)
            if dt:
                expiry_str = dt.strftime("%d.%m.%Y %H:%M")
                now = datetime.now(ZoneInfo("Europe/Moscow"))
                expired = dt < now

        if expired:
            await callback.message.answer(
                "‚ùå –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: <b>–ò—Å—Ç–µ–∫–ª–∞</b>\n"
                f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{expiry_str}</b>\n\n"
                "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="renew_subscription")],
                        [InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url=f"https://t.me/{ADMIN_USERNAME}")]
                    ]
                )
            )
        else:
            await callback.message.answer(
                "üîé –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: <b>–ê–∫—Ç–∏–≤–Ω–∞</b>\n"
                f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{expiry_str}</b>\n\n"
                "‚ùó –Ø –Ω–∞–ø–æ–º–Ω—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="renew_subscription")],
                        [InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url=f"https://t.me/{ADMIN_USERNAME}")]
                    ]
                )
            )
    else:
        await callback.message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url=f"https://t.me/{ADMIN_USERNAME}")]
                ]
            )
        )


# –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
@router.callback_query(F.data == "renew_subscription")
async def handle_renew_subscription(callback: CallbackQuery):
    await callback.answer()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü (200‚ÇΩ)", callback_data="buy_1m")],
            [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ (600‚ÇΩ)", callback_data="buy_3m")],
            [InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ (1800‚ÇΩ)", callback_data="buy_6m")],
        ]
    )
    await callback.message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=kb)

@router.callback_query(F.data.startswith("buy_"))
async def handle_buy_subscription(callback: CallbackQuery):
    plan = callback.data.split("_")[1]
    prices = {
        "1m": {"amount": 20000, "label": "1 –º–µ—Å—è—Ü", "months": 1},
        "3m": {"amount": 60000, "label": "3 –º–µ—Å—è—Ü–∞", "months": 3},
        "6m": {"amount": 180000, "label": "6 –º–µ—Å—è—Ü–µ–≤", "months": 6}
    }

    if plan not in prices:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω", show_alert=True)
        return

    await callback.answer()

    price = prices[plan]
    provider_token = os.getenv("PAYMENT_PROVIDER_TOKEN")

    await callback.message.answer_invoice(
        title="–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
        description=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {price['label']}",
        provider_token=provider_token,
        currency="RUB",
        prices=[LabeledPrice(label=price["label"], amount=price["amount"])],
        start_parameter="renew_sub",
        payload=f"{callback.from_user.id}_{plan}"
    )

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π pre-checkout
@router.pre_checkout_query(lambda q: True)
async def pre_checkout(pre_checkout_q: PreCheckoutQuery):
    await pre_checkout_q.answer(ok=True)

# –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
@router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment_handler(message: Message):
    payload = message.successful_payment.invoice_payload
    try:
        tg_id_str, plan = payload.split("_")
        tg_id = int(tg_id_str)
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–ª–∞—Ç—É.")
        return

    months_map = {"1m": 1, "3m": 3, "6m": 6}
    months = months_map.get(plan)
    if not months:
        await message.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        return

    user = await find_user_by_tg(tg_id)
    if not user:
        await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    expiry_now = get_expiry_datetime(user["expiryTime"])
    now = datetime.now(ZoneInfo("Europe/Moscow"))
    if not expiry_now or expiry_now < now:
        expiry_now = now

    new_expiry = expiry_now + timedelta(days=30 * months)
    new_expiry = new_expiry.replace(hour=23, minute=59, second=59, microsecond=0)

    success = await update_user_expiry(
        user["inbound_id"],
        user["client"]["id"],
        int(new_expiry.astimezone(timezone.utc).timestamp() * 1000)
    )

    if success:
        await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ <b>{new_expiry.strftime('%d.%m.%Y %H:%M')}</b>")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@router.message(Command("broadcast"))
async def handle_broadcast(message: Message, command: CommandObject):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    text = command.args
    if not text:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ]", parse_mode="HTML")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    clients = await get_all_clients()
    count = 0
    for client in clients:
        tg_id = client.get("tgId")
        if not tg_id:
            continue
        try:
            await message.bot.send_message(tg_id, text)
            count += 1
        except Exception as e:
            print(f"[broadcast] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {tg_id}: {e}")

    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

#google sheets
@router.message(Command("sync"))
async def sync_command(message: Message, bot: Bot):
    await sync_to_google_sheets(bot)
    await message.answer("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")